package org.ablonewolf.combinationOperators;

import org.ablonewolf.common.NumberGenerator;
import org.ablonewolf.common.Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Flux;

/**
 * Demonstrates the use of Reactive Streams for merging two separate number streams.
 * One stream contains odd numbers, and the other stream contains even numbers.
 * The merged output stream is subscribed to by a default subscriber,
 * which logs the received data.
 * <p>
 * This class leverages the {@code Flux.merge} method from Project Reactor
 * to combine multiple reactive streams into a single unified stream.
 * These streams are generated by the utility methods provided in the
 * {@code NumberGenerator} class.
 * <p>
 * Additionally, the class showcases a reactive programming approach where streams
 * of varying characteristics (odd and even number streams) are seamlessly combined
 * and consumed in a non-blocking manner.
 * <p>
 * Methods and utilities used:<br>
 * - {@code NumberGenerator.getOddNumberStream(Logger log)}: Creates a reactive stream of odd numbers.<br>
 * - {@code NumberGenerator.getEvenNumberStream(Logger log)}: Creates a reactive stream of even numbers.<br>
 * - {@code Util.subscriber(String name)}: Returns a subscriber to consume the merged stream.<br>
 * - {@code Util.sleepSeconds(Long seconds)}: Adds a delay for demonstration purposes to ensure
 * merged streams can emit their values within the time frame.
 */
public class DemonstrateMerge {

	private static final Logger log = LoggerFactory.getLogger(DemonstrateMerge.class);

	public static void main(String[] args) {

		var oddNumberStream = NumberGenerator.getOddNumberStream(log);
		var evenNumberStream = NumberGenerator.getEvenNumberStream(log);

		Flux.merge(oddNumberStream, evenNumberStream)
				.subscribe(Util.subscriber("Number Stream Subscriber"));

		Util.sleepSeconds(3L);
	}
}
