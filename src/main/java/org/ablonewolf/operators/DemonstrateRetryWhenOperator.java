package org.ablonewolf.operators;

import org.ablonewolf.common.NameGenerator;
import org.ablonewolf.common.Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.util.retry.Retry;

import java.time.Duration;

/**
 * The DemonstrateRetryWhenOperator class demonstrates the usage of the {@code retryWhen} operator
 * from Project Reactor to re-subscribe to a publisher in response to errors, with customizable delay
 * and retry conditions. It highlights how the {@code retryWhen} operator can be effectively used
 * to handle failures gracefully and control retry behavior based on specific criteria.
 * <p>
 * Unlike the basic {@code retry} operator, which retries a fixed number of times immediately upon error,
 * the {@code retryWhen} operator provides more flexibility by allowing the introduction of delays,
 * filtering of retryable exceptions, and even dynamic retry logic using backpressure-aware strategies.
 * <p>
 * Key demonstrations include:<br>
 * 1. Using {@code retryWhen} with a fixed delay retry strategy to recover from errors and re-subscribe.<br>
 * 2. Limiting retry attempts to a specified number while filtering only certain types of exceptions.<br>
 * 3. Combining retry logic with the {@code repeat} and {@code takeUntil} operators to achieve controlled
 * and conditional re-subscription after errors.
 * <p>
 * Dependencies:<br>
 * - The class relies on the {@link NameGenerator} class to generate a publisher that may emit errors
 * after a limited number of emissions.<br>
 * - The {@link Util} class is used to create subscribers and simulate thread sleep.<br>
 * - The SLF4J {@link Logger} is used for logging diagnostic information during execution.<br>
 * - Uses {@link Retry} from Reactor for defining retry strategies and {@link Duration} to specify delay intervals.
 * <p>
 */
public class DemonstrateRetryWhenOperator {

	private static final Logger log = LoggerFactory.getLogger(DemonstrateRetryWhenOperator.class);

	public static void main(String[] args) {

		// the following pipeline will repeat in case of any error generated by the publisher.
		// the retrying will be done in a fixed delay with a fixed number of attempts
		NameGenerator.getSingleCountryNameWithLimitCount(log)
				.repeat()
				.takeUntil(countryName -> countryName.equalsIgnoreCase("australia"))
				.retryWhen(Retry.fixedDelay(4, Duration.ofMillis(500))
								   .filter(throwable -> throwable instanceof RuntimeException))
				.subscribe(Util.subscriber("Country Subscriber"));

		Util.sleepSeconds(10L);
	}
}
