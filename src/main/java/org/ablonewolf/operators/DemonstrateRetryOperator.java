package org.ablonewolf.operators;

import org.ablonewolf.common.NameGenerator;
import org.ablonewolf.common.Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The DemonstrateRetryOperator class demonstrates the usage of the {@code retry} operator
 * from Project Reactor to re-subscribe to a publisher in response to errors.
 * It highlights how the {@code retry} operator can be used to automatically recover from failures
 * by restarting the subscription sequence, making it particularly useful for idempotent operations
 * or resilient data streams.
 * <p>
 * The {@code retry} operator will re-subscribe to the publisher every time an error occurs,
 * resetting the stream and allowing the data flow to continue until the desired condition is met.
 * This behavior works well with publishers that reset their internal state upon error,
 * such as the one used in this demonstration.
 * <p>
 * Key demonstrations include:<br>
 * 1. Using the basic {@code retry} operator to restart the sequence on any error.<br>
 * 2. Combining retry logic with the {@code repeat} and {@code takeUntil} operators to achieve
 * conditional and controlled re-subscription after recovery from errors.
 * <p>
 * Dependencies:<br>
 * - The class relies on the {@link NameGenerator} class to generate a publisher that emits a limited number
 * of items and throws an error before restarting its sequence.<br>
 * - The {@link Util} class is utilized for creating subscribers and simulating thread sleep.<br>
 * - The SLF4J {@link Logger} is used for logging execution details and error occurrences within the publisher.
 * <p>
 */
public class DemonstrateRetryOperator {

	private static final Logger log = LoggerFactory.getLogger(DemonstrateRetryOperator.class);

	public static void main(String[] args) {

		// the following pipeline will repeat in case of any error generated by the publisher.
		// the publisher code has been done in a way that it will set the item count to initial value in case of any
		// error
		NameGenerator.getSingleCountryNameWithLimitCount(log)
				.repeat()
				.takeUntil(countryName -> countryName.equalsIgnoreCase("australia"))
				.retry()
				.subscribe(Util.subscriber("Country Subscriber"));

		Util.sleepSeconds(10L);
	}
}
